<?php
use Application\Service\FpdiExtends;
use Application\Service\TcpdfExtends;
use Application\Service\CommonService;

// Check if the template_file is set in $configData
if (isset($configData['template_file']) && !empty($configData['template_file'])) {
    // Use FpdiExtends if the template_file is provided
    $pdf = new FpdiExtends('P', 'mm', 'A4', true, 'UTF-8', false, false);
    $pdf->setParams($configData['template_file'], $configData['template_top_margin']);
} else {
    // Use TCPDF as a fallback when template_file is not provided
    $pdf = new TcpdfExtends(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
    $pdf->setSchemeName(ucwords($configData['header']), $configData['logo']);
}
// set document information
$pdf->SetCreator(PDF_CREATOR);
$pdf->SetAuthor('ODK DASHBOARD');
$pdf->SetTitle('SPI-RRT Checklist');
$pdf->SetSubject('SPI-RRT 6.0 Checklist');

// Set the rest of the PDF configuration
$pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);

// set header and footer fonts
$pdf->setHeaderFont([PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN]);
$pdf->setFooterFont([PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA]);

// set default monospaced font
$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

// set margins

$pdf->SetMargins(32, 52, 27);
$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

// set auto page breaks
$pdf->SetAutoPageBreak(true, 70);

// set image scale factor
$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

// set font
$pdf->SetFont('times', '', 10);

// Add a page to the PDF
$pdf->AddPage('P');

if ($argument['dateRange'] == '') {
    $argument['dateRange'] = CommonService::humanReadableDateFormat($result['eDate']) . " - " . date('d-M-Y');
}
if ($argument['auditRndNo'] == '') {
    $argument['auditRndNo'] = "All";
}
if ($argument['level'] == '') {
    $argument['level'] = "All";
}
if ($argument['affiliation'] == '') {
    $argument['affiliation'] = "All";
}
// if ($argument['province'] == '') {
//     $argument['province'] = "All";
// } else if (is_array($argument['province'])) {
//     $argument['province'] = implode(",", $argument['province']);
// }
// if ($argument['district'] == '') {
//     $argument['district'] = "All";
// } else if (is_array($argument['district'])) {
//     $argument['district'] = implode(",", $argument['district']);
// }
if ($argument['scoreLevel'] == '') {
    $argument['scoreLevel'] = "All";
}
if ($argument['testPoint'] == '') {
    $argument['testPoint'] = "All";
}
$filter = '';
$filter .= "<tr><td><b>" . $this->translate("Date Range") . " </b>: " . $argument['dateRange'] . "</td><td><b>" . $this->translate("Audit Round No.") . " </b>: " . $argument['auditRndNo'] . "</td><td><b>" . $this->translate("Level") . " </b>: " . $argument['level'] . "</td></tr>";
//$filter .= "<tr><td><b>" . $this->translate("Affiliation") . " </b>: " . $argument['affiliation'] . "</td><td><b>" . $this->translate("Province") . " </b>: " . $argument['province'] . "</td><td><b>" . $this->translate("District") . " </b>: " . $argument['district'] . "</td></tr>";
$filter .= "<tr><td><b>" . $this->translate("Score Level") . " </b>: " . $argument['scoreLevel'] . "</td><td><b>" . $this->translate("Type Of Testing Point") . " </b>: " . $argument['testPoint'] . "</td></tr>";
$partA = '';
$partA .= '<table border="1" cellspacing="0" cellpadding="5" style="width:97%;" >' . $filter . '</table><br><br>';
$pdf->writeHTML($partA, true, 0, true, 0);
$h = $pdf->getY();  // Get the current y-coordinate

if ($h < 52) {
    // If $h is less than 52, set the heights to fixed values
    $style1 = "height:380px;width:400px;";
    $style2 = "height:390px;width:400px;";
} else {
    // Calculate the difference from 52
    $diff = $h - 52;

    // Calculate new heights based on the difference
    // Ensure that heights are not negative by capping the minimum value
    $h1 = max(50, 400 - ($diff * 3.5));  // Set a minimum value of 50 for safety
    $h2 = max(50, 400 - ($diff * 3.5));

    // Set the styles based on the new height calculations
    $style1 = "height:" . $h1 . "px;width:400px;";
    $style2 = "height:" . $h2 . "px;width:400px;";
}

$pdfContent = '<br><br><br><br><br>';
$pdfContent .= '<table style="background-color:#fff;margin-bottom:20px;width:100%;">';
$pdfContent .= '<tr>';
$pdfContent .= '<td><img style="' . $style1 . '" src="' . $this->basePath('temporary/radar-spiv6.png') . '" alt="PDF" /></td>';
$pdfContent .= '<td><img style="' . $style2 . '" src="' . $this->basePath('temporary/piechart-spiv6.png') . '" alt="PDF" /></td>';
$pdfContent .= '</tr>';
$pdfContent .= '</table><br><br><br><br><br><br>';
$pdfContent .= '<table style="background-color:#fff;margin-bottom:20px;width:100%;">';
$pdfContent .= '<tr>';
$pdfContent .= '<td><img style="' . $style1 . '" src="' . $this->basePath('temporary/radar-section-s0-spiv6.png') . '" alt="PDF" /></td>';
$pdfContent .= '<td><img style="' . $style2 . '" src="' . $this->basePath('temporary/radar-section-d0-spiv6.png') . '" alt="PDF" /></td>';
$pdfContent .= '</tr>';
$pdfContent .= '</table><br><br><br><br><br><br><br><br>';
$pdf->writeHTML($pdfContent, true, 0, true, 0);

$testingResult = '<table border="1" BORDERCOLOR=RED cellspacing="0" cellpadding="5" >';
$testingResult .= '<tr style="background-color:#3598DC;color:#fff;text-align:center">';
$testingResult .= '<th><b>' . $this->translate("Facility Name") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("Audit Round No.") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("Audit Date") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("Testing Point Name") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("Testing Point Type") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("Level") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("Affiliation") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("Personnel Training & Certification") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("Physical") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("Safety") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("Pre-Testing") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("Testing") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("Post-Testing") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("External QA") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("RTRI") . '</b></th>';
$testingResult .= '<th><b>' . $this->translate("Total(%)") . '</b></th>';
$testingResult .= '</tr>';

//var_dump($result['aaData']);die;
foreach ($result['aaData'] as $aRow) {
    $testingResult .= '<tr style="border:1px solid #dddddd;">';
    $testingResult .= '<td>' . $aRow[1] . '</td><td>' . $aRow[2] . '</td><td>' . $aRow[3] . '</td><td>' . $aRow[4] . '</td><td>' . $aRow[5] . '</td><td>' . $aRow[6] . '</td><td>' . $aRow[7] . '</td><td>' . $aRow[10] . '</td><td>' . $aRow[11] . '</td><td>' . $aRow[12] . '</td><td>' . $aRow[13] . '</td><td>' . $aRow[14] . '</td><td>' . $aRow[15] . '</td><td>' . $aRow[16] . '</td><td>' . $aRow[17] . '</td><td>' . $aRow[18] . '</td>';
    $testingResult .= '</tr>';
}
$testingResult .= '</table>';

$pdf->writeHTML($testingResult, true, 0, true, 0);

$testingResultAvg = '';
$testingResultAvg .= '<table style="background-color:#fff;margin-bottom:20px;font-size:13px;">';
$testingResultAvg .= '<tr>';
$testingResultAvg .= '<td style="width:25%;">&nbsp;<strong>' . $this->translate("No.of Audit(s)") . ':&nbsp;</strong>' . count($result['aaData']) . '</td>';
$testingResultAvg .= '<td style="padding-left:1%;width:25%;"><strong>' . $this->translate("Avg. Audit Score") . ':&nbsp;</strong>' . $result['avgAuditScore'] . '</td>';
$testingResultAvg .= '<td style="width:1%;"></td>';
$testingResultAvg .= '<td style="width:1%;background-color:red;"></td>';
$testingResultAvg .= '<td style="padding-left:1%;width:25%;"><strong>' . $this->translate("Level 0(Below 40)") . ':&nbsp;</strong>' . $result['levelZeroCount'] . '</td>';
$testingResultAvg .= '<td style="width:1%;"></td>';
$testingResultAvg .= '<td style="width:1%;background-color:orange;"></td>';
$testingResultAvg .= '<td style="padding-left:1%;width:25%;"><strong>' . $this->translate("Level 1(40-59)") . ':&nbsp;</strong>' . $result['levelOneCount'] . '</td>';
$testingResultAvg .= '</tr>';
$testingResultAvg .= '<tr>';
$testingResultAvg .= '<td colspan="4"><br/></td>';
$testingResultAvg .= '</tr>';
$testingResultAvg .= '<tr>';
$testingResultAvg .= '<td style="width:1%;background-color:yellow;"></td>';
$testingResultAvg .= '<td style="padding-left:1%;width:25%;"><strong>' . $this->translate("Level 2 (60-79)") . ':&nbsp;</strong>' . $result['levelTwoCount'] . '</td>';
$testingResultAvg .= '<td style="width:1%;background-color:#8DD63E;"></td>';
$testingResultAvg .= '<td style="padding-left:0%;width:25%;"><strong>' . $this->translate("Level 3 (80-89)") . ':&nbsp;</strong>' . $result['levelThreeCount'] . '</td>';
$testingResultAvg .= '<td style="width:1%;background-color:#528A16;"></td>';
$testingResultAvg .= '<td style="padding-left:0%;width:25%;"><strong>' . $this->translate("Level 4 (90 and above)") . ':&nbsp;</strong>' . $result['levelFourCount'] . '</td>';
$testingResultAvg .= '</tr>';
$testingResultAvg .= '</table>';

// print_r($pdfContent);die;
$pdf->writeHTML($testingResultAvg, true, 0, true, 0);
$fileName = "SPI-RRT-Summary-" . date('d-m-y-h-i-s');
$filePath = TEMP_UPLOAD_PATH . DIRECTORY_SEPARATOR . $fileName;
$pdf->Output($filePath, "F");
echo $fileName;